{"version":3,"sources":["types/Options.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","components/ErrorMessage/ErrorMessage.tsx","App.tsx","index.tsx"],"names":["Options","TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","React","memo","selectOption","appliedQuery","setAppliedQuery","onChange","event","target","value","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","clearSelectedTodo","setHasRequestError","useState","selectedUser","setSelectedUser","getSelectedUser","a","userId","userFromServer","useEffect","href","email","name","ErrorMessage","App","setTodos","selectedOption","setSelectedOption","hasRequestError","loadTodos","todosFromServer","getVisibleTodos","useMemo","filteresTodos","filter","toLowerCase","includes","option","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5513a27.chunk.js","sourcesContent":["export enum Options {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedTodo: Dispatch<SetStateAction<Todo | null>>,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed\n            && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectedTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye': todo.id !== selectedTodo?.id,\n                    'fa-eye-slash': todo.id === selectedTodo?.id,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Options } from '../../types/Options';\n\ntype Props = {\n  selectOption: (arg: string) => void,\n  appliedQuery: string,\n  setAppliedQuery: Dispatch<SetStateAction<string>>\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    selectOption,\n    appliedQuery,\n    setAppliedQuery,\n  }) => {\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={(event) => selectOption(event.target.value)}\n            >\n              <option value={Options.ALL}>All</option>\n              <option value={Options.ACTIVE}>Active</option>\n              <option value={Options.COMPLETED}>Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={appliedQuery}\n            onChange={(event) => {\n              setAppliedQuery(event.target.value);\n            }}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          { appliedQuery\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"Clear Search\"\n                onClick={() => setAppliedQuery('')}\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  useState, useEffect, Dispatch, SetStateAction,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo,\n  clearSelectedTodo: () => void,\n  setHasRequestError: Dispatch<SetStateAction<boolean>>,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  clearSelectedTodo,\n  setHasRequestError,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const getSelectedUser = async () => {\n    try {\n      const userFromServer = await getUser(selectedTodo.userId);\n\n      setSelectedUser(userFromServer);\n    } catch (error) {\n      setHasRequestError(true);\n    }\n  };\n\n  useEffect(() => {\n    getSelectedUser();\n  }, []);\n\n  const closeTodoModal = () => {\n    setSelectedUser(null);\n    clearSelectedTodo();\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      { !selectedTodo || !selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodoModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              { selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './ErrorMessage.scss';\n\nexport const ErrorMessage: React.FC = () => (\n  <div className=\"block notification is-danger is-light\">\n    An error occurred while downloading data from the server\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, {\n  useEffect, useState, useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { ErrorMessage } from './components/ErrorMessage';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Options } from './types/Options';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedOption, setSelectedOption] = useState<string>(Options.ALL);\n  const [appliedQuery, setAppliedQuery] = useState<string>('');\n  const [hasRequestError, setHasRequestError] = useState<boolean>(false);\n\n  const loadTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setHasRequestError(false);\n    } catch (error) {\n      setHasRequestError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const clearSelectedTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  const selectOption = (option: string) => {\n    setSelectedOption(option);\n  };\n\n  const getVisibleTodos = useMemo<Todo[]>(() => {\n    let filteresTodos: Todo[] = todos;\n\n    if (selectedOption === Options.COMPLETED) {\n      filteresTodos = filteresTodos.filter(todo => todo.completed);\n    }\n\n    if (selectedOption === Options.ACTIVE) {\n      filteresTodos = filteresTodos.filter(todo => !todo.completed);\n    }\n\n    if (appliedQuery) {\n      filteresTodos = filteresTodos.filter((todo) => (\n        todo.title.toLowerCase().includes(appliedQuery.toLowerCase())\n      ));\n    }\n\n    return filteresTodos;\n  }, [todos, appliedQuery, selectedOption]);\n\n  if (hasRequestError) {\n    return <ErrorMessage />;\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectOption={selectOption}\n                appliedQuery={appliedQuery}\n                setAppliedQuery={setAppliedQuery}\n              />\n            </div>\n\n            { !todos.length\n              ? <Loader />\n              : (\n                <div className=\"block\">\n                  <TodoList\n                    todos={getVisibleTodos}\n                    setSelectedTodo={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n      && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setHasRequestError={setHasRequestError}\n          clearSelectedTodo={clearSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}